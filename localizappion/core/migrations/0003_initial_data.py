# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-10-09 11:42
from __future__ import unicode_literals

import os
import uuid

from django.db import migrations

PROJECT_UUID = '0d296504-e113-4f68-89c7-4617eea04b38'


def forwards_func(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    assert db_alias == 'default'

    project_model = apps.get_model('core', 'Project')
    language_model = apps.get_model('core', 'Language')
    string_model = apps.get_model('core', 'String')
    suggestion_model = apps.get_model('core', 'Suggestion')
    translation_model = apps.get_model('core', 'Translation')
    translator_model = apps.get_model('core', 'Translator')
    vote_model = apps.get_model('core', 'Vote')

    project = project_model.objects.create(
        uuid=PROJECT_UUID,
        name="Aggregator"
    )
    project.languages = language_model.objects.filter(code__in=('de', 'es', 'pt', 'uk'))

    with open(os.path.join(os.path.dirname(__file__), '0003_initial_data_strings.txt')) as data_file:
        for line in data_file:
            string_name, string_value_other = line.split('|', 1)
            string_model.objects.create(
                project=project,
                name=string_name.strip(),
                value_other=string_value_other.strip(),
            )

    with open(os.path.join(os.path.dirname(__file__), '0003_initial_data_translators.txt')) as data_file:
        for line in data_file:
            translator_alias = line.strip()
            translator_model.objects.create(
                uuid=uuid.uuid4(),
                alias=translator_alias,
            )

    with open(os.path.join(os.path.dirname(__file__), '0003_initial_data_suggestions.txt')) as data_file:
        for line in data_file:
            string_name, language_code, translator_alias, suggestion_value = line.split('|', 3)
            string = string_model.objects.get(project=project, name=string_name.strip())
            language = language_model.objects.get(code=language_code.strip())
            translation, _ = translation_model.objects.get_or_create(project=project, language=language)
            translator = translator_model.objects.get(alias=translator_alias.strip())
            suggestion = suggestion_model.objects.filter(
                translation=translation,
                string=string,
                value=suggestion_value.strip()
            ).first()
            if not suggestion:
                suggestion = suggestion_model.objects.create(
                    translator=translator,
                    string=string,
                    translation=translation,
                    value=suggestion_value.strip(),
                )
            vote_model.objects.create(
                translator=translator,
                suggestion=suggestion,
            )


def reverse_func(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    assert db_alias == 'default'

    project_model = apps.get_model('core', 'Project')
    translator_model = apps.get_model('core', 'Translator')
    vote_model = apps.get_model('core', 'Vote')

    vote_model.objects.filter().delete()
    project_model.objects.filter(uuid=PROJECT_UUID).delete()
    translator_model.objects.filter().delete()


class Migration(migrations.Migration):
    dependencies = [
        ('core', '0002_initial_languages'),
    ]

    operations = [
        migrations.RunPython(forwards_func, reverse_func)
    ]
