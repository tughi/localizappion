"""init

Revision ID: 290ede997b8c
Revises: 
Create Date: 2018-02-16 21:41:41.077145

"""
import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision = '290ede997b8c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    language_table = op.create_table(
        'language',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('code', sa.VARCHAR(length=8), nullable=False),
        sa.Column('name', sa.VARCHAR(length=64), nullable=True),
        sa.Column('plurals_zero', sa.VARCHAR(length=128), nullable=True),
        sa.Column('plurals_one', sa.VARCHAR(length=128), nullable=True),
        sa.Column('plurals_two', sa.VARCHAR(length=128), nullable=True),
        sa.Column('plurals_few', sa.VARCHAR(length=128), nullable=True),
        sa.Column('plurals_many', sa.VARCHAR(length=128), nullable=True),
        sa.Column('plurals_other', sa.VARCHAR(length=128), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('code')
    )
    project_table = op.create_table(
        'project',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('uuid', sa.VARCHAR(length=40), nullable=False),
        sa.Column('name', sa.VARCHAR(length=128), nullable=False),
        sa.Column('strings_upload_time', sa.TIMESTAMP(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('name'),
        sa.UniqueConstraint('uuid')
    )
    translator_table = op.create_table(
        'translator',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('email_hash', sa.TEXT(), nullable=False),
        sa.Column('alias', sa.VARCHAR(length=32), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email_hash')
    )
    op.create_table(
        'screenshot',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('project_id', sa.INTEGER(), nullable=False),
        sa.Column('name', sa.VARCHAR(length=128), nullable=False),
        sa.Column('file_name', sa.VARCHAR(length=64), nullable=False),
        sa.Column('file_size', sa.INTEGER(), nullable=False),
        sa.Column('file_type', sa.VARCHAR(length=16), nullable=False),
        sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('project_id', 'name')
    )
    string_table = op.create_table(
        'string',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('project_id', sa.INTEGER(), nullable=False),
        sa.Column('name', sa.VARCHAR(length=64), nullable=False),
        sa.Column('value_one', sa.TEXT(), nullable=True),
        sa.Column('value_other', sa.TEXT(), nullable=False),
        sa.Column('markers', sa.TEXT(), nullable=True),
        sa.Column('position', sa.INTEGER(), nullable=True),
        sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('project_id', 'name')
    )
    translation_table = op.create_table(
        'translation',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('uuid', sa.VARCHAR(length=40), nullable=False),
        sa.Column('project_id', sa.INTEGER(), nullable=False),
        sa.Column('language_id', sa.INTEGER(), nullable=False),
        sa.ForeignKeyConstraint(['language_id'], ['language.id'], ),
        sa.ForeignKeyConstraint(['project_id'], ['project.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('uuid')
    )
    op.create_table(
        'translator_session',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('uuid', sa.VARCHAR(length=40), nullable=False),
        sa.Column('translator_id', sa.INTEGER(), nullable=False),
        sa.Column('added_time', sa.TIMESTAMP(), nullable=False),
        sa.Column('activation_code', sa.VARCHAR(length=40), nullable=False),
        sa.Column('activated_time', sa.TIMESTAMP(), nullable=True),
        sa.ForeignKeyConstraint(['translator_id'], ['translator.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('activation_code'),
        sa.UniqueConstraint('uuid')
    )
    op.create_table(
        'screenshot_string',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('screenshot_id', sa.INTEGER(), nullable=False),
        sa.Column('string_id', sa.INTEGER(), nullable=False),
        sa.Column('area', sa.VARCHAR(length=27), nullable=False),
        sa.ForeignKeyConstraint(['screenshot_id'], ['screenshot.id'], ),
        sa.ForeignKeyConstraint(['string_id'], ['string.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('screenshot_id', 'string_id')
    )
    suggestion_table = op.create_table(
        'suggestion',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('translation_id', sa.INTEGER(), nullable=False),
        sa.Column('translator_id', sa.INTEGER(), nullable=False),
        sa.Column('string_id', sa.INTEGER(), nullable=False),
        sa.Column('value_zero', sa.TEXT(), nullable=True),
        sa.Column('value_one', sa.TEXT(), nullable=True),
        sa.Column('value_two', sa.TEXT(), nullable=True),
        sa.Column('value_few', sa.TEXT(), nullable=True),
        sa.Column('value_many', sa.TEXT(), nullable=True),
        sa.Column('value_other', sa.TEXT(), nullable=False),
        sa.Column('uuid', sa.VARCHAR(length=40), nullable=False),
        sa.Column('google_translation', sa.TEXT(), nullable=True),
        sa.Column('accepted', sa.BOOLEAN(), nullable=True),
        sa.Column('added_time', sa.TIMESTAMP(), nullable=False),
        sa.ForeignKeyConstraint(['string_id'], ['string.id'], ),
        sa.ForeignKeyConstraint(['translation_id'], ['translation.id'], ),
        sa.ForeignKeyConstraint(['translator_id'], ['translator.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('translation_id', 'string_id', 'value_zero', 'value_one', 'value_two', 'value_few', 'value_many', 'value_other'),
        sa.UniqueConstraint('uuid')
    )
    suggestion_vote_table = op.create_table(
        'suggestion_vote',
        sa.Column('id', sa.INTEGER(), nullable=False),
        sa.Column('suggestion_id', sa.INTEGER(), nullable=False),
        sa.Column('translator_id', sa.INTEGER(), nullable=False),
        sa.Column('value', sa.INTEGER(), nullable=False),
        sa.ForeignKeyConstraint(['suggestion_id'], ['suggestion.id'], ),
        sa.ForeignKeyConstraint(['translator_id'], ['translator.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('suggestion_id', 'translator_id')
    )
    # ### end Alembic commands ###

    import_db_data(language_table, project_table, string_table, translator_table, translation_table, suggestion_table, suggestion_vote_table)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('suggestion_vote')
    op.drop_table('suggestion')
    op.drop_table('screenshot_string')
    op.drop_table('translator_session')
    op.drop_table('translation')
    op.drop_table('string')
    op.drop_table('screenshot')
    op.drop_table('translator')
    op.drop_table('project')
    op.drop_table('language')
    # ### end Alembic commands ###


def import_db_data(language_table, project_table, string_table, translator_table, translation_table, suggestion_table, suggestion_vote_table):
    import os

    db_data = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'db_data')
    if not os.path.exists(db_data):
        return

    from localizappion.utils import create_hash

    languages = {}
    with open(os.path.join(db_data, 'languages.txt')) as data_file:
        for language_id, line in enumerate(data_file, 1):
            code, name, plurals_zero, plurals_one, plurals_two, plurals_few, plurals_many, plurals_other = map(str.strip, line.split('|'))
            languages[code] = dict(
                id=language_id,
                code=code,
                name=name,
                plurals_zero=plurals_zero or None,
                plurals_one=plurals_one or None,
                plurals_two=plurals_two or None,
                plurals_few=plurals_few or None,
                plurals_many=plurals_many or None,
                plurals_other=plurals_other or None,
            )
        op.bulk_insert(
            language_table,
            list(languages.values()),
            multiinsert=False,
        )

    projects = {}
    with open(os.path.join(db_data, 'projects.txt')) as data_file:
        for project_id, line in enumerate(data_file, 1):
            project_uuid, project_name = map(str.strip, line.split('|', 1))
            projects[project_uuid] = dict(
                id=project_id,
                uuid=project_uuid,
                name=project_name,
            )
        op.bulk_insert(
            project_table,
            list(projects.values()),
            multiinsert=False,
        )

    strings = {}
    with open(os.path.join(db_data, 'strings.txt')) as data_file:
        for string_id, line in enumerate(data_file, 1):
            project_uuid, string_name, string_value_one, string_value_other, string_markers = map(str.strip, line.split('|'))
            project_id = projects[project_uuid]['id']
            strings[(project_id, string_name)] = dict(
                id=string_id,
                project_id=project_id,
                name=string_name,
                value_one=string_value_one or None,
                value_other=string_value_other,
                position=string_id,
                markers=string_markers or None,
            )
        op.bulk_insert(
            string_table,
            list(strings.values()),
            multiinsert=False,
        )

    translators = {}
    with open(os.path.join(db_data, 'translators.txt')) as data_file:
        for translator_id, line in enumerate(data_file, 1):
            translator_alias, translator_email = map(str.strip, line.split('|'))
            translators[translator_alias] = dict(
                id=translator_id,
                email_hash=create_hash(translator_email),
                alias=translator_alias,
            )
        op.bulk_insert(
            translator_table,
            list(translators.values()),
            multiinsert=False,
        )

    import uuid
    from datetime import datetime

    translations = {}
    suggestions = {}
    suggestion_votes = []
    with open(os.path.join(db_data, 'suggestions.txt')) as data_file:
        for suggestion_id, line in enumerate(data_file, 1):
            project_uuid, string_name, language_code, translator_alias, value_other, value_one = map(str.strip, line.split('|', 5))
            project_id = projects[project_uuid]['id']
            language_id = languages[language_code]['id']
            translation = translations.get((project_id, language_id))
            if not translation:
                translations[(project_id, language_id)] = translation = dict(
                    id=suggestion_id,
                    uuid=str(uuid.uuid4()),
                    project_id=project_id,
                    language_id=language_id,
                )
            translation_id = translation['id']
            translator_id = translators[translator_alias]['id']
            string_id = strings[(project_id, string_name)]['id']
            suggestion = suggestions.get((translation_id, string_id, value_other))
            if not suggestion:
                suggestions[(translation_id, string_id, value_other)] = suggestion = dict(
                    id=suggestion_id,
                    uuid=str(uuid.uuid4()),
                    translation_id=translation_id,
                    translator_id=translator_id,
                    string_id=string_id,
                    value_one=value_one or None,
                    value_other=value_other,
                    accepted=True,
                    added_time=datetime.now()
                )
            suggestion_votes.append(dict(
                suggestion_id=suggestion['id'],
                translator_id=translator_id,
                value=1,
            ))
        op.bulk_insert(
            translation_table,
            list(translations.values()),
            multiinsert=False,
        )
        op.bulk_insert(
            suggestion_table,
            list(suggestions.values()),
            multiinsert=False,
        )
        op.bulk_insert(
            suggestion_vote_table,
            suggestion_votes,
            multiinsert=False,
        )
